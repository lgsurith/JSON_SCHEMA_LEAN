------The Schema Definition ------
$schema: specifies which draft of the JSON Schema standard the schema adheres to.
$id: sets a URI for the schema. You can use this unique URI to refer to elements of the schema from inside the same document or from external JSON documents.
title and description: state the intent of the schema. These keywords don’t add any constraints to the data being validated.
type: defines the first constraint on the JSON data. In the product catalog example below, this keyword specifies that the data must be a JSON object.
Type here is a validation keyword.
----------------------------------

------------Properties------------
This section adds the properties keyword. In JSON Schema terms, properties is a validation keyword.
When you define properties, you create an object where each property represents a key in the JSON data that’s being validated.
 You can also specify which properties defined in the object are required.
For example in this case we have taken into cnsideration of the id and name and defined the parameters that must be validated.

For Optional Properties in a given Schema :
This section describes how to define an optional property. For this example, define a keyword named tags using the following criteria:
The tags keyword is optional.
If tags is included, it must contain at least one item.
All tags must be unique.
All tags must be text.
----------------------------------

The code from Line 1-32 represents a flat schema and moving on further we might need to develop an complex schema with nested structures in order to validate.


